In un pub tedesco durante l’Oktoberfest, è consentito l’ingresso solo a gruppi di cinque avventori dopo che un
altro gruppo di cinque ha lasciato il pub, nel momento di maggiore affollamento. Una volta entrati, N birrai
pongono continuamente boccali di birra di volta in volta in un bancone che può contenere MAX boccali. I boccali
sono prelevati da M camerieri (M<MAX) che provvedono a servirli ai tavoli. Ciascun cameriere può portare 2
boccali per volta, se disponibili, ma, in caso di affollamento, i camerieri preleveranno 3 boccali per volta. Fornire
una soluzione con semafori.


    Gruppi_persone: -Entrano
                -Bevono
                -Vanno via

Birraio:        -Fanno birre

Cameriere:      -controlla se il posto è affollato e decide come consegnare
                -preleva il numero di boccali dal bancone rispetto a come sta il locale
                -consegna
-------------------------------------------------------------------------------------------------------------------------
semaforo ingressoGruppi = 1       // Solo un gruppo di 5 può entrare alla volta
semaforo birreDisponibili = 0     // Conta i boccali disponibili nel bancone
semaforo spazioBancone = MAX      // Indica lo spazio disponibile nel bancone
mutex accessoBancone = 1          // Per sincronizzare l'accesso al bancone (EQUIVALENTE DI MUTEX OGGI ME LO SENTIVO COSI'
mutex accessoGruppi = 1           // Per sincronizzare il cambio di gruppo



Processo Birraio() {
    while (true) {
        wait(spazioBancone)      // Aspetta spazio libero nel bancone
        wait(accessoBancone)     // Protegge la scrittura sul bancone
        // Produce un boccale di birra e lo mette sul bancone
        signal(accessoBancone)   // Rilascia il bancone
        signal(birreDisponibili) // Segnala che c'è una birra disponibile
    }
}

Processo Cameriere() {
    while (true) {
        int boccaliDaPrendere;

        wait(accessoBancone)      // Protegge la lettura del bancone
        if (birreDisponibili == MAX) {
            boccaliDaPrendere = 3; // Se il bancone è pieno, prende 3 boccali
        } else {
            boccaliDaPrendere = 2; // Altrimenti prende 2 boccali
        }
        signal(accessoBancone)     // Rilascia il bancone
        
        for (int i = 0; i < boccaliDaPrendere; i++) {
            wait(birreDisponibili)  // Aspetta un boccale disponibile
            signal(spazioBancone)   // Libera spazio sul bancone
        }

        // Serve i boccali ai tavoli
    }
}


Processo Avventore() {
    wait(ingressoGruppi)         // Aspetta di poter entrare con il gruppo
    // Entra nel pub e consuma birra
    signal(ingressoGruppi)       // Permette al gruppo successivo di entrare
}
