Si consideri il seguente problema:
I passeggeri in transito in un aeroporto prima di imbarcarsi sull'aereo, devono superare i controlli di sicurezza.
I controlli sono gestiti come segue:
Ogni passeggero sceglie tra N code quella più breve cui accodarsi ed attendere il proprio turno per passare il controllo.
Ogni coda è gestita da un addetto che lascia passare il primo passeggero della coda,
indirizzandolo verso una delle M code di accesso al metal detector.
Ogni addetto indirizza il passeggero verso la coda più breve con lunghezza minore di K. 
Se il numero di code con lunghezza minore di K è inferiore a M/2, gli addetti non lasciano passare i passeggeri finchè persiste tale condizione.
Dopo aver attraversato il metal detector, il passeggero si dirige all'imbarco.


int num_code = N; // Numero di code disponibili per i controlli di sicurezza
int num_code_metaldet = M; // Numero di code disponibili per i metal detector
int max_code_lunghezza = M / 2; // Soglia massima per considerare sufficienti le code con lunghezza < K

int coda_piccola = -1; // Indice della coda di sicurezza più corta scelta dal passeggero
int coda_scelta = -1; // Indice della coda del metal detector assegnata dall'addetto

semaforo : sezione_critica = 1; // Semaforo per la mutua esclusione (accesso alle sezioni critiche)

int code_metal[M] = {0}; // Array che tiene traccia della lunghezza delle code ai metal detector
semaforo : controllo[N] = {0}; // Array di semafori per sincronizzare i passeggeri durante il controllo
semaforo : coda_addetto[N] = {0}; // Array di semafori per gestire le code di accesso ai controlli di sicurezza

-----------------------------------------------------------------------
Passeggero()
{
    while(1)
    {
        //Trovo la coda di lunghezza minore e segnalo che voglio andarci all'addetto
        wait(sezione_critica)
        coda_piccola = trova_coda_minore(coda_addetto) //Trova_coda_minore è una funzione che ricerca la coda più piccola a quel momento
        signal(coda_addetto[coda_piccola])
        signal(sezione_critica)

        //Attendo il controllo
        wait(controllo[coda_piccola])

        //Fatto il controllo devo andare via dalla coda scelta verso 
        wait(sezione_critica)
        
        coda_metal[coda_scelta]++  //aggiorno la coda del metal detector così che i prossimi vengano indirizzato in modo giusto (viene aumentata solo da passeggero così che rifletta l'entrata nella coda)

        signal(sezione_critica)

    }
}

Addetto(int i)
{
    while(1)
    {
        wait(coda_addetto[i]) //Aspetto che ci sia un passeggero nella coda dell'addetto I-esimo

        //Finche la somma delle code è maggiore a M/2 fa passare i passeggeri
        while(sum(coda_addetto, K) >= max_code_lunghezza)
        {

            {controllo svolto}

            //Trovo la coda di lunghezza minore K
            wait(sezione_critica)
            coda_scelta = trova_coda_minore(coda_addetto, K)    
            signal(sezione_critica)

            //Segnalo il controllo all'addetto, sbloccando il passeggero
            Signal(controllo[coda_piccola])
        }
    }
}
