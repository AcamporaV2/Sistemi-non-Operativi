/*
	Nella sala recruitment di una grande azienda informatica, durante una sessione di interview, possono prendere posto al più N candidati, 
    mentre i restanti candidati prenderanno parte alla sessione di Interview successiva. 
    Ogni candidato che ha trovato posto sarà chiamato al tavolo delle interview. 
    L'addetto alle risorse umane attende fino a che è disponibile un candidato. 
    Terminata l'intervista il candidato lascia il tavolo e la sala facendo posto al prossimo candidato. 
    Le sessioni di interview terminano quando non ci sono più candidati in attesa. Proporre una soluzione e discutere eventuali problemi di deadlock.
*/

//PUOKKIERE ADDORMENTATO ho perso finalmente la sanità

semaforo candidati = 0  // Indica quanti candidati sono in attesa
semaforo tavolo = 1      // Indica se il tavolo è libero (1 = libero, 0 = occupato)
semaforo mutex = 1       // Mutua esclusione per modificare la variabile Attesa

int sedie = K  // Numero massimo di candidati in attesa
int Attesa = 0  // Contatore dei candidati in attesa

candidato()
{
    while(true)
    {
        wait(mutex)
        if(Attesa < sedie)
        {
            Attesa++
            signal(candidati)  // Notifica all'intervistatore che c'è un candidato in attesa
            signal(mutex)
            wait(tavolo)  // Attende che il tavolo sia libero per l'intervista
            [INTERVISTA]
            signal(tavolo)  // Libera il tavolo dopo l'intervista
        } 
        else
        {
            signal(mutex)
            exit()  // Esce se non c'è posto
        }
    }
}

intervistatore()
{
    while(true)
    {
        wait(candidati)  // Attende un candidato disponibile
        wait(mutex)
        Attesa--  // Decrementa il numero di candidati in attesa
        signal(mutex)
        
        [INTERVISTA]

    }
}
