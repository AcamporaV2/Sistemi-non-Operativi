Un panettiere produce tre tipi di pane. I clienti del suddetto esercizio, si dispongono in un'unica fila per essere
    serviti. Al proprio turno, un cliente chiede uno dei tre tipi di pane e se
    disponibile lo riceve lasciando l'esercizio.
  Nel caso in cui il tipo di pane richiesto non fosse disponibile e non fosse già in preparazione, il panettiere inforna
    una quantità N del tipo di pane mancante e passa al prossimo cliente. Terminata la cottura, i clienti in attesa
    vengono serviti in maniera prioritaria rispetto a quelli in fila.


Panettiere: -Se ci sono persone in fila, controlla i tipi di pane
            -Se non c'è quel pane lo prepara e aumenta il pane disponibile
            -Se nessuno aspetta serve il pane ai frati


Cliente: - Si mette in fila
         -Chiede del pane
         -Se disponibile paga e se ne va
         -se non disponibile aspetta e poi svolge il passaggio di sopra

// Variabili di stato
int pane_disponibile[3] = {0, 0, 0}  // Quantità di ciascun tipo di pane disponibile
bool in_preparazione[3] = {false, false, false}  // Indica se un tipo di pane è in preparazione
int clienti_in_attesa[3] = {0, 0, 0}  // Numero di clienti in attesa per ciascun tipo di pane

// Semafori
semaforo mutex = 1          // Protegge l'accesso alle variabili condivise
semaforo pane_pronto[3] = {0, 0, 0}  // Segnala quando il pane è disponibile per un tipo specifico
semaforo cliente_servito = 0  // Sincronizza il cliente servito con il panettiere

// Processo Cliente
process Cliente(int tipo_pane) {
    wait(mutex)
    if (pane_disponibile[tipo_pane] > 0) {
        // Pane disponibile, il cliente lo prende e lascia l'esercizio
        pane_disponibile[tipo_pane] -= 1
        signal(mutex)
    } else {
        // Pane non disponibile
        if (!in_preparazione[tipo_pane]) {
            // Il panettiere deve iniziare la preparazione
            in_preparazione[tipo_pane] = true
            signal(cliente_servito)  // Notifica il panettiere
        }
        // Cliente si mette in attesa della cottura
        clienti_in_attesa[tipo_pane] += 1
        signal(mutex)
        wait(pane_pronto[tipo_pane])  // Attende che il pane sia pronto
    }
    // Cliente servito, lascia l'esercizio
}

// Processo Panettiere
process Panettiere() {
    while (true) {
        wait(cliente_servito)  // Aspetta una richiesta di cottura
        wait(mutex)
        
        // Trova quale pane deve essere infornato
        for i = 0 to 2 do {
            if (in_preparazione[i]) {
                // Prepara il pane
                in_preparazione[i] = false
                pane_disponibile[i] += N  // Sforna N pezzi di pane
                
                // Servi prima i clienti in attesa
                while (clienti_in_attesa[i] > 0) {
                    clienti_in_attesa[i] -= 1
                    signal(pane_pronto[i])
                }
            }
        }
        
        signal(mutex)
    }
}
